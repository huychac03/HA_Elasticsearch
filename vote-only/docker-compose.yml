version: "3.8"


volumes:
 certs:
   driver: local
 esdata_vote_only:
   driver: local


# networks:
#  default:
#    name: elastic
#    external: false


services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        # elif [ x${KIBANA_PASSWORD} == x ]; then
        #   echo "Set the KIBANA_PASSWORD environment variable in the .env file";
        #   exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch-vote-only\n"\
          "    dns:\n"\
          "      - elasticsearch-vote-only\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch-vote-only:9200 | grep -q "missing authentication credentials"; do sleep 30; done;

        echo "All done!";
      '
    # healthcheck:
    #   test: ["CMD-SHELL", "[ -f config/certs/elasticsearch-vote-only/es01.crt ]"]
    #   interval: 1s
    #   timeout: 5s
    #   retries: 120


  elasticsearch-vote-only:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch-vote-only
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata_vote_only:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT_1}:9200
      - ${ES_PORT_2}:9300
    environment:
      - node.name=elasticsearch-vote-only
      - cluster.initial_master_nodes=elasticsearch-master1,elasticsearch-master2
      - discovery.seed_hosts=10.1.1.81,10.1.1.148,10.1.1.125
      - network.publish_host=10.1.1.81
      - http.publish_host=10.1.1.81
      - transport.publish_host=10.1.1.81
      - cluster.name=${CLUSTER_NAME}
      - node.roles=master,voting_only
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms4g -Xmx4g
      - bootstrap.memory_lock=true
      - xpack.monitoring.collection.enabled=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch-vote-only/elasticsearch-vote-only.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch-vote-only/elasticsearch-vote-only.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch-vote-only/elasticsearch-vote-only.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch-vote-only/elasticsearch-vote-only.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # healthcheck:
    #   test:
    #     [
    #       "CMD-SHELL",
    #       "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
    #     ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 120